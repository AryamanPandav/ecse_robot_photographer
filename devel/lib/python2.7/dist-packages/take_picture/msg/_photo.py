# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from take_picture/photo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import take_picture.msg

class photo(genpy.Message):
  _md5sum = "73107e627d00c84fe1b7898bd9bdf0c8"
  _type = "take_picture/photo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool candid
int32 faces 
BoundingBox[] boundingboxes

================================================================================
MSG: take_picture/BoundingBox
string Class
float64 probability
int64 xmin
int64 ymin
int64 xmax
int64 ymax

"""
  __slots__ = ['candid','faces','boundingboxes']
  _slot_types = ['bool','int32','take_picture/BoundingBox[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       candid,faces,boundingboxes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(photo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.candid is None:
        self.candid = False
      if self.faces is None:
        self.faces = 0
      if self.boundingboxes is None:
        self.boundingboxes = []
    else:
      self.candid = False
      self.faces = 0
      self.boundingboxes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.candid, _x.faces))
      length = len(self.boundingboxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundingboxes:
        _x = val1.Class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_d4q().pack(_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.boundingboxes is None:
        self.boundingboxes = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.candid, _x.faces,) = _get_struct_Bi().unpack(str[start:end])
      self.candid = bool(self.candid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundingboxes = []
      for i in range(0, length):
        val1 = take_picture.msg.BoundingBox()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.Class = str[start:end].decode('utf-8')
        else:
          val1.Class = str[start:end]
        _x = val1
        start = end
        end += 40
        (_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax,) = _get_struct_d4q().unpack(str[start:end])
        self.boundingboxes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bi().pack(_x.candid, _x.faces))
      length = len(self.boundingboxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.boundingboxes:
        _x = val1.Class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_d4q().pack(_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.boundingboxes is None:
        self.boundingboxes = None
      end = 0
      _x = self
      start = end
      end += 5
      (_x.candid, _x.faces,) = _get_struct_Bi().unpack(str[start:end])
      self.candid = bool(self.candid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.boundingboxes = []
      for i in range(0, length):
        val1 = take_picture.msg.BoundingBox()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.Class = str[start:end].decode('utf-8')
        else:
          val1.Class = str[start:end]
        _x = val1
        start = end
        end += 40
        (_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax,) = _get_struct_d4q().unpack(str[start:end])
        self.boundingboxes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_d4q = None
def _get_struct_d4q():
    global _struct_d4q
    if _struct_d4q is None:
        _struct_d4q = struct.Struct("<d4q")
    return _struct_d4q
_struct_Bi = None
def _get_struct_Bi():
    global _struct_Bi
    if _struct_Bi is None:
        _struct_Bi = struct.Struct("<Bi")
    return _struct_Bi
