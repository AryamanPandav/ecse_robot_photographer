// Generated by gencpp from file take_picture/photo.msg
// DO NOT EDIT!


#ifndef TAKE_PICTURE_MESSAGE_PHOTO_H
#define TAKE_PICTURE_MESSAGE_PHOTO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <take_picture/BoundingBox.h>

namespace take_picture
{
template <class ContainerAllocator>
struct photo_
{
  typedef photo_<ContainerAllocator> Type;

  photo_()
    : candid(false)
    , faces(0)
    , boundingboxes()  {
    }
  photo_(const ContainerAllocator& _alloc)
    : candid(false)
    , faces(0)
    , boundingboxes(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _candid_type;
  _candid_type candid;

   typedef int32_t _faces_type;
  _faces_type faces;

   typedef std::vector< ::take_picture::BoundingBox_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::take_picture::BoundingBox_<ContainerAllocator> >::other >  _boundingboxes_type;
  _boundingboxes_type boundingboxes;





  typedef boost::shared_ptr< ::take_picture::photo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::take_picture::photo_<ContainerAllocator> const> ConstPtr;

}; // struct photo_

typedef ::take_picture::photo_<std::allocator<void> > photo;

typedef boost::shared_ptr< ::take_picture::photo > photoPtr;
typedef boost::shared_ptr< ::take_picture::photo const> photoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::take_picture::photo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::take_picture::photo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace take_picture

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'take_picture': ['/home/nvidia/catkin_ws/src/take_picture/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::take_picture::photo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::take_picture::photo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::take_picture::photo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::take_picture::photo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::take_picture::photo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::take_picture::photo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::take_picture::photo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "73107e627d00c84fe1b7898bd9bdf0c8";
  }

  static const char* value(const ::take_picture::photo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x73107e627d00c84fULL;
  static const uint64_t static_value2 = 0xe1b7898bd9bdf0c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::take_picture::photo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "take_picture/photo";
  }

  static const char* value(const ::take_picture::photo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::take_picture::photo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool candid\n\
int32 faces \n\
BoundingBox[] boundingboxes\n\
\n\
================================================================================\n\
MSG: take_picture/BoundingBox\n\
string Class\n\
float64 probability\n\
int64 xmin\n\
int64 ymin\n\
int64 xmax\n\
int64 ymax\n\
\n\
";
  }

  static const char* value(const ::take_picture::photo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::take_picture::photo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.candid);
      stream.next(m.faces);
      stream.next(m.boundingboxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct photo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::take_picture::photo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::take_picture::photo_<ContainerAllocator>& v)
  {
    s << indent << "candid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.candid);
    s << indent << "faces: ";
    Printer<int32_t>::stream(s, indent + "  ", v.faces);
    s << indent << "boundingboxes[]" << std::endl;
    for (size_t i = 0; i < v.boundingboxes.size(); ++i)
    {
      s << indent << "  boundingboxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::take_picture::BoundingBox_<ContainerAllocator> >::stream(s, indent + "    ", v.boundingboxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TAKE_PICTURE_MESSAGE_PHOTO_H
